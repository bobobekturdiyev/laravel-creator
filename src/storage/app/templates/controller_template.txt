<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\MODEL_NAME;
use App\Http\Resources\MODEL_RESOURCE;
use App\Http\ValidatorResponse;
use Illuminate\Http\Request;

  SWAGGER_MODEL

class MODEL_CONTROLLER extends Controller
{
    SWAGGER_GET_ALL
    public function index()
    {
        $MODEL_VARIABLES = MODEL_NAME::all();
        return response()->json([
            'data' => MODEL_RESOURCE::collection($MODEL_VARIABLES),
        ]);
    }

    SWAGGER_GET_SINGLE
    public function show(string $id)
    {
        $MODEL_VARIABLE = MODEL_NAME::find($id);
        if(!$MODEL_VARIABLE){
            return response()->json([
                'message' => "MODEL_NAME not found",
                'code' => 403,
            ]);
        }

        return response()->json([
            'data' => new MODEL_RESOURCE($MODEL_VARIABLE),
            'code' => 200
        ]);
    }

    SWAGGER_CREATE
    public function store(Request $request)
    {
        $rules = VALIDATOR;
        $validator = new ValidatorResponse();
        $validator->check($request, $rules);
        if($validator->fails){
            return response()->json([
                'message' => $validator->response,
                'code' => 400
            ]);
        }
        $MODEL_VARIABLE = new MODEL_NAME();
        MODEL_REQUEST
        $MODEL_VARIABLE->save();
        return response()->json([
            'data' => new MODEL_RESOURCE($MODEL_VARIABLE),
            'code' => 200
        ]);
    }

    SWAGGER_UPDATE
    public function update(Request $request, string $id)
    {
        $rules = VALIDATOR;
        $validator = new ValidatorResponse();
        $validator->check($request, $rules);
        if($validator->fails){
            return response()->json([
                'message' => $validator->response,
                'code' => 400
            ]);
        }
        $MODEL_VARIABLE = MODEL_NAME::find($id);
        if(!$MODEL_VARIABLE){
            return response()->json([
                'message' => "Event not found",
                'code' => 404
            ]);
        }
        MODEL_REQUEST
        return response()->json([
            'data' => new MODEL_RESOURCE($MODEL_VARIABLE),
            'code' => 200
        ]);
    }

    SWAGGER_DELETE
    public function destroy(string $id)
    {
        $MODEL_VARIABLE = MODEL_NAME::find($id);
        if(!$MODEL_VARIABLE){
            return response()->json([
                'message' => "MODEL_NAME not found",
                'code' => 404,
            ]);
        }
        $MODEL_VARIABLE->delete();
        return response()->json([
            'data' => new MODEL_RESOURCE($MODEL_VARIABLE),
            'code' => 200
        ]);
    }
}
